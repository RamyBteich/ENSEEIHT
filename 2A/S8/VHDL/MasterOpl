library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity MasterOpl is
  port ( rst     : in std_logic;
         clk     : in std_logic;
         en      : in std_logic;
         v1      : in std_logic_vector (7 downto 0);
         v2      : in std_logic_vector(7 downto 0);
         miso    : in std_logic;
         ss      : out std_logic;
         sclk    : out std_logic;
         mosi    : out std_logic;
         val_and : out std_logic_vector (7 downto 0);
         val_xor : out std_logic_vector (7 downto 0);
         val_nor : out std_logic_vector (7 downto 0);
         busy    : out std_logic);
end MasterOpl;

architecture behavior of MasterOpl is
	type t_etat is (repos,attente,echange);
	signal etat : t_etat;
	
	
  component er_1octet
    port ( 
			  rst  : in std_logic;
           clk  : in std_logic;
           en   : in std_logic;
           din  : in std_logic_vector (7 downto 0);
           miso : in std_logic;
           sclk : out std_logic;
           mosi : out std_logic;
           dout : out std_logic_vector (7 downto 0);
           busy : out std_logic);
  end component;
  
	 signal er_en : std_logic;
    signal er_din : std_logic_vector(7 downto 0);
    signal er_dout : std_logic_vector(7 downto 0);
    signal er_busy : std_logic;    

begin
 
    m : er_1octet port map(
        rst=>rst,
        clk=>clk,
        en=>er_en,
        din=>er_din,
        miso=>miso,
        sclk=>sclk,
        mosi=>mosi,
        dout=>er_dout,
        busy=>er_busy
    );
        

    
    master: process (clk, rst)
    
        
        variable cpt : natural := 0;
        variable byte : natural := 0;

    
    begin

    -- reset condition
    if rst = '0' then
        etat <= repos;
        busy <= '0';
        ss <= '1';
        val_and <= (others => '0');
        val_nor <= (others => '0');
        val_xor <= (others => '0');

    --clock-edge condition
    elsif rising_edge(clk) then
        case etat is
            when repos =>
                if en = '1' then
                    ss <= '0';
                    busy <= '1';
                    cpt :=10;
                    byte := 0;
                    etat <= attente;
            
					 end if;

					when attente =>
							 if cpt = 0 then
								  er_en <= '1';
								  if byte = 0 then
										er_din <= v1;
								  elsif byte = 1 then
										er_din <= v2;
								  end if;
								  etat <= echange;
							 else
								  cpt := cpt - 1;
							 end if;

            when echange =>
                er_en <= '0';
                if er_busy = '0' and er_en = '0' then
						if byte = 0 then
							 val_and <= er_dout;
							 etat <= attente;
							 
						elsif byte = 1 then
							 val_xor <= er_dout;
							 etat <= attente;
							 
						elsif byte = 2 then
							 val_nor <= er_dout;
							 ss <= '1';
							 busy <= '0';
							 etat <= repos;
							 er_en <= '0';
							 
						else
							 null;
					
					end if;		
                    byte := byte + 1;
                    cpt := 2;
                end if;

            when others => null;
        end case;
    end if;
    
    end process;
end behavior;
